if(!require(tidyverse)){
install.packages("tidyverse")
}
library(tidyverse)
library(pacman)
install.packages(pacman)
install.packages("pacman")
p_load(pacman)
library(pacman)
p_load(tidyverse)
mtcars
mtcars[,1]
head(mtcars)
mtcars$hp = mt_cars4
mt_cars4 = mtcars$hp
mtcars[3,4]
mtcars$hp[3]
mtcars[,1:3]
dim(mtcars)
mtcars
dim(mtcars)
mtcars[1:2,8:11]
mtcars[1:16 * 2,]
mtcars_copy = mtcars
mtcars_copy$mpg = mtcars_copy$mpg * 2
mtcars_copy$super_mpg = mtcars_copy$mpg * 100
colnames(mtcars_copy)
mtcars_copy$mpg = mtcars_copy$mpg /2
head(mtcars_copy)
mtcars
cereal = read.csv("cereal.csv")
getwd()
setwd("/Users/jonathanle/Documents/qbio/qbio_data_analysis_jonathanl/week3_homework/")
cereal = read.csv("cereal.csv")
getwd()
setwd("/Users/jonathanle/Documents/qbio/qbio_data_analysis_jonathanl/")
cereal = read.csv("cereal.csv")
head(cereal)
cereal_names = rownames(cereal)
cereal_names
cereal_names = cereal$name
cereal_names
favorite_cereals = c("Frosted Flakes", "Wheaties", "Kix")
test = c("cyan", "yellow", "magenta", "key")
test[2:3]
numeric_values = c(1, 2, NA, 3, NA, NA, NA, 4)
numeric_values[!is.na(numeric_values)]
favorite_cereals %in% cereal_names
cereal_names %in% favorite_cereals
favorite_cereal_data = cereal_names %in% favorite_cereals
favorite_cereal_data
cereal_names
cereal
cereal
favorite_cereal_data = cereal[cereal_names %in% favorite_cereals,]
favorite_cereal_data
dim(favorite_cereal_data)
numeric_values = c(1, 2, NA, 3, NA, NA, NA, 4)
numeric_values = ifelse(numeric_values == NA, -1,)
numeric_values
numeric_values = c(1, 2, NA, 3, NA, NA, NA, 4)
numeric_values = ifelse(is.na(numeric_values), -1,)
numeric_values = ifelse(is.na(numeric_values), -1, numeric_values)
numeric_values
numeric_values = c(1, 2, NA, 3, NA, NA, NA, 4)
numeric_values = numeric_values[!is.na(numeric_values)]
numeric_values
numeric_values = ifelse(numeric_values > mean(numeric_values), "large","small")
numeric_values
cereal[type_full] = ifelse(cereal[type] == "C", "Cold", "Hot")
cereal[type_full] = ifelse(cereal$type == "C", "Cold", "Hot")
cereal$type_full = ifelse(cereal$type == "C", "Cold", "Hot")
cereal
plot(mtcars$mpg, mtcars$hp)
cereal$is_favorite = ifelse(cereal$name %in% favorite_cereals, "favorite", "not favorite")
cereal
plot(cereal$carbo, cereal$calories, xlab = "Carbs", ylab = "Calories")
plot(cereal$carbo, cereal$calories, xlab = "Carbs", ylab = "Calories", col = factor(cereal$is_favorite))
boxplot(cereal$fiber)
pwd()
getwd()
write.csv(cereal, cereal_favorites.csv)
write.csv(cereal_favorites.csv)
write.csv(cereal)
clear
clear()
ls
getwd()
setwd("/Users/jonathanle/Documents/qbio/qbio_data_analysis_jonathanl/week3_homework/")
attenu
attenu[is.na(attenu$station),]
attenu_cleaned = attenu[!is.na(attenu$station),]
attenu_cleaned = attenu[!is.na(attenu$station),]
attenu_cleaned
head(attenu_cleaned)
dim(attenu_cleaned)
Theolph_2 = Theolph
Theoph_2 = Theoph
attenu[is.na(attenu$station),]
Theoph_2
str(Theoph_2)
median(Theoph_2$Dose)
Theoph_2$Dose_Class = ifelse(Theoph_2$Dose >= median(Theoph_2$Dose), "high", "low")
Theoph_2
head(Theoph_2)
dim(Theoph_2)
starbucks = read.csv("starbucks.csv")
head(starbucks)
is.na(starbucks)
dim(starbucks)
rowSums(starbucks)
rowSums(is.na(starbucks))
is_row_empty = rowSums(is.na(starbucks))
rowSums(starbucks)
length(is_row_empty)
nrow(starbucks)
starbucks_cleaned = starbucks[is_row_empty == 0,]
starbucks_cleaned
starbucks
is_row_empty
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, ylab = "Calories", xlab = "Carbohydrates (g)")
starbucks_cleaned[max(starbucks_cleaned$Calories),]
max(starbucks_cleaned$Calories)
starbucks_cleaned[,max(starbucks_cleaned$Calories)]
starbucks_cleaned[starbucks_cleaned == max(starbucks_cleaned$Calories),]
starbucks_cleaned[starbucks_cleaned$Calories == max(starbucks_cleaned$Calories),]
starbucks_cleaned[starbucks_cleaned$Calories == max(starbucks_cleaned$Calories),]$Drink
starbucks_cleaned$is_highest_fat = ifelse(starbucks_cleaned$Fat == max(starbucks_cleaned$Fat), TRUE, FALSE)
starbucks_cleaned
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, ylab = "Calories", xlab = "Carbohydrates (g)", col = starbucks_cleaned$is_highest_fat)
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, ylab = "Calories", xlab = "Carbohydrates (g)")
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, ylab = "Calories", xlab = "Carbohydrates (g)",
col = factor(starbucks_cleaned$is_highest_fat))
library(ggplot2)
ggplot() +
geom_point(data=starbucks_cleaned, aes(x = starbucks_cleaned$Carb, y = starbucks_cleaned$Calories, col = factor(starbucks_cleaned$is_highest_fat))) +
scale_colour_gradient(low="#A9C8F3", high="#0C2389")
ggplot(data=starbucks_cleaned, aes(x = ]Carb, y = \Calories, col = factor(is_highest_fat)) +
geom_point() +
scale_colour_gradient(low="#A9C8F3", high="#0C2389")
ggplot(data=starbucks_cleaned, aes(x = Carb, y = Calories, col = factor(is_highest_fat)) +
geom_point() +
scale_colour_gradient(low="#A9C8F3", high="#0C2389")
ggplot(data=starbucks_cleaned, aes(x = Carb, y = Calories, col = factor(is_highest_fat)) +
geom_point() +
scale_colour_gradient(low="#A9C8F3", high="#0C2389")
ggplot(data=starbucks_cleaned, aes(x = Carb, y = Calories, col = factor(is_highest_fat))) +
geom_point() +
scale_colour_gradient(low="#A9C8F3", high="#0C2389")
ggplot(data=starbucks_cleaned, aes(x = Carb, y = Calories, col = factor(is_highest_fat))) +
geom_point() +
scale_colour_gradient(low="green", high="red")
ggplot(data=starbucks_cleaned, aes(x = Carb, y = Calories, col = factor(fat))) +
geom_point() +
scale_colour_gradient(low="green", high="red")
ggplot(data=starbucks_cleaned, aes(x = Carb, y = Calories, col = factor(Fat))) +
geom_point() +
scale_colour_gradient(low="green", high="red")
ggplot(data=starbucks_cleaned, aes(x = Carb, y = Calories, col = Fat)) +
geom_point() +
scale_colour_gradient(low="green", high="red")
baseball = read.csv("baseball.csv")
baseball = read.csv("Batting.csv")
baseball
baseball[baseball$HR >= 3,]
plot(baseball$yearID, baseball$HR, xlab = "Year", ylab = "Number of Homeruns")
LAA_players = baseball[baseball$teamID == "LAA"]
plot(LAA_players$yearID, LAA_players$HR, xlab = "Year", ylab = "Number of Homeruns")
LAA_players = baseball[baseball$teamID == "LAA",]
plot(LAA_players$yearID, LAA_players$HR, xlab = "Year", ylab = "Number of Homeruns")
LAA_players = baseball[baseball$teamID == "LAA",]
LAA_players
ATL_or_PIT_players = baseball[baseball$teamID == "ATL" | baseball$teamID == "PIT",]
ATL_or_PIT_players
head(ATL_or_PIT_players)
tail(ATL_or_PIT_players)
plot(ATL_or_PIT_players$yearID, ATL_or_PIT_players$HR, xlab = "Year", ylab = "Number of Homeruns", col = factor(ATL_or_PIT_players$teamID))
easy_plot <- function(x, y, color_data){
color_data_median = median(color_data)
color_levels = ifelse(color_data > median, "high", "low")
color_levels = factor(color_levels)
print(color_data_median)
plot(x, y, col = color_levels, pch = 20)
cor.test(x, y)
}
starbucks_cleaned
easy_plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, starbucks_cleaned = starbucks_cleaned$Fat)
easy_plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, starbucks_cleaned$Fat)
easy_plot <- function(x, y, color_data){
color_data_median = median(color_data)
color_levels = ifelse(color_data > color_data_median, "high", "low")
color_levels = factor(color_levels)
print(color_data_median)
plot(x, y, col = color_levels, pch = 20)
cor.test(x, y)
}
easy_plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, starbucks_cleaned$Fat)
easy_plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, starbucks_cleaned$Carb)
easy_plot(baseball$HR, baseball$H, baseball$AB)
easy_plot(baseball$HR, baseball$RBI, baseball$AB)
easy_plot(baseball$H, baseball$RBI, baseball$AB)
easy_plot(baseball$H, baseball$RBI, baseball$HR)
iris
dim(iris)
type(4.3)
class(5.4)
class("virginica")
###Exercise 2.3
hist(iris$Sepal.Length)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
iris_copy = iris
mean_sepal_width = mean(iris$Sepal.Width)
iris_copy = iris
mean_sepal_width = mean(iris$Sepal.Width)
sepal_width_compare = ifelse(iris$Sepal.Width > mean_sepal_width, "wide", "narrow")
iris_copy$Sepal_Width_Factor = sepal_width_compare
iris_copy
boxplot(iris_copy$Sepal.Width ~ iris_copy$Sepal_Width_Factor)
?pairs
iris_subset = subset(iris, select(1:4))
iris_subset = subset(iris, select(-c(Species)))
iris_subset = subset(iris, select(-c("Species")))
iris_subset = subset(iris, select(-c(iris$Species)))
iris_subset = iris[,1:4]
iris_subset
pairs(iris_subset)
pairs(iris_subset)
pairs(iris)
?pairs
pairs(iris, subset = iris[,1:4])
pairs(iris, col = factor(iris$Species))
pairs(iris_subset, col = factor(iris$Species))
install.packages("TCGAbiolinks")
install.packages("TCGAbiolinks")
library(TCGAbiolinks)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
